plugins {
	id 'fabric-loom' version '1.1-SNAPSHOT'
	id 'maven-publish'
	id 'com.gradleup.shadow' version '8.3.3'
	id 'java'
}

loom {
	accessWidenerPath = file("src/main/resources/fdmc.accesswidener")
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://jitpack.io' }
	// cloth config
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// MixinExtras
	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}")))

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// ClothConfig
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// ModeMenu
	modApi "com.terraformersmc:modmenu:${project.mod_menu_version}"

	//screenshot gifencoder
	shadow(implementation('com.squareup:gifencoder:0.10.1'))

	// Uncomment the following line to enable the deprecated Fabric API modules.
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

//data gen
def dataOutput = 'src/main/generated'

loom {
	runs {
		//
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
		//
		datagenClient {
			delete "src/main/generated" //so no duplicate issues
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${modid}"
			runDir "build/datagen"
		}
	}
}

//
// Adds the generated files into the jar you distribute to players.
//
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

sourceSets { main { resources { srcDirs += dataOutput } } }

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

shadowJar{
	configurations = [project.configurations.shadow]
//	archiveClassifier.set("dev")
	relocate "com.squareup.gifencoder", "com.gmail.inayakitorikhurram.fdmc.shadow.com.squareup.gifencoder"
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

remapJar{
	dependsOn(shadowJar)
	inputFile = tasks.shadowJar.archiveFile
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
